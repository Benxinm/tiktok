// Code generated by Kitex v0.6.1. DO NOT EDIT.

package videoservice

import (
	"context"
	video "github.com/benxinm/tiktok/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Feed(ctx context.Context, req *video.FeedRequest, callOptions ...callopt.Option) (r *video.FeedResponse, err error)
	PutVideo(ctx context.Context, req *video.PutVideoRequest, callOptions ...callopt.Option) (r *video.PutVideoResponse, err error)
	GetFavoriteVideoInfo(ctx context.Context, req *video.GetFavoriteVideoInfoRequest, callOptions ...callopt.Option) (r *video.GetFavoriteVideoInfoResponse, err error)
	GetPublishList(ctx context.Context, req *video.GetPublishListRequest, callOptions ...callopt.Option) (r *video.GetPublishListResponse, err error)
	GetWorkCount(ctx context.Context, req *video.GetWorkCountRequest, callOptions ...callopt.Option) (r *video.GetWorkCountResponse, err error)
	GetVideoIDByUid(ctx context.Context, req *video.GetVideoIDByUidRequest, callOptions ...callopt.Option) (r *video.GetVideoIDByUidResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) Feed(ctx context.Context, req *video.FeedRequest, callOptions ...callopt.Option) (r *video.FeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Feed(ctx, req)
}

func (p *kVideoServiceClient) PutVideo(ctx context.Context, req *video.PutVideoRequest, callOptions ...callopt.Option) (r *video.PutVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PutVideo(ctx, req)
}

func (p *kVideoServiceClient) GetFavoriteVideoInfo(ctx context.Context, req *video.GetFavoriteVideoInfoRequest, callOptions ...callopt.Option) (r *video.GetFavoriteVideoInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteVideoInfo(ctx, req)
}

func (p *kVideoServiceClient) GetPublishList(ctx context.Context, req *video.GetPublishListRequest, callOptions ...callopt.Option) (r *video.GetPublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPublishList(ctx, req)
}

func (p *kVideoServiceClient) GetWorkCount(ctx context.Context, req *video.GetWorkCountRequest, callOptions ...callopt.Option) (r *video.GetWorkCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetWorkCount(ctx, req)
}

func (p *kVideoServiceClient) GetVideoIDByUid(ctx context.Context, req *video.GetVideoIDByUidRequest, callOptions ...callopt.Option) (r *video.GetVideoIDByUidResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoIDByUid(ctx, req)
}
