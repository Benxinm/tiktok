// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/benxinm/tiktok/cmd/api/biz/pack"
	"github.com/benxinm/tiktok/cmd/api/biz/rpc"
	"github.com/benxinm/tiktok/kitex_gen/chat"
	"github.com/benxinm/tiktok/kitex_gen/follow"

	api "github.com/benxinm/tiktok/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.FailResponse(c, err)
		return
	}

	resp := new(api.RelationActionResponse)
	err = rpc.RelationAction(ctx, &follow.ActionRequest{
		Token:      req.Token,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	})
	if err != nil {
		pack.FailResponse(c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.FailResponse(c, err)
		return
	}

	resp := new(api.RelationFollowListResponse)
	followList, err := rpc.FollowList(ctx, &follow.FollowListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		pack.FailResponse(c, err)
		return
	}
	resp.UserList = pack.UserList(followList)
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.FailResponse(c, err)
		return
	}

	resp := new(api.RelationFollowerListResponse)
	followList, err := rpc.FollowerList(ctx, &follow.FollowerListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		pack.FailResponse(c, err)
		return
	}
	resp.UserList = pack.UserList(followList)
	c.JSON(consts.StatusOK, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.FailResponse(c, err)
		return
	}

	resp := new(api.RelationFriendListResponse)
	followList, err := rpc.FriendList(ctx, &follow.FriendListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	if err != nil {
		pack.FailResponse(c, err)
		return
	}
	resp.UserList = pack.FriendList(followList)
	c.JSON(consts.StatusOK, resp)
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.FailResponse(c, err)
		return
	}

	resp := new(api.MessageActionResponse)
	err = rpc.MessageAction(ctx, &chat.MessagePostRequest{
		Token:      req.Token,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
		Content:    req.Content,
	})
	if err != nil {
		pack.FailResponse(c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.FailResponse(c, err)
		return
	}

	resp := new(api.MessageChatResponse)
	messageList, _, err := rpc.MessageList(ctx, &chat.MessageListRequest{
		Token:    req.Token,
		ToUserId: req.ToUserID,
	})
	if err != nil {
		pack.FailResponse(c, err)
		return
	}
	resp.MessageList = pack.MessageList(messageList)
	c.JSON(consts.StatusOK, resp)
}
